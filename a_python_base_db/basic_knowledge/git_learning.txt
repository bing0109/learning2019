


https://blog.csdn.net/zxy987872674/article/details/72491066
创建和删除分支：

在本地新建一个分支： git branch newBranch 
切换到你的新分支: git checkout newBranch 
将新分支发布在github上： git push origin newBranch 
在本地删除一个分支： git branch -d newBranch 
在github远程端删除一个分支： git push origin :newBranch (分支名前的冒号代表删除) 
/git push origin –delete newBranch 
注意删除远程分支后，如果有对应的本地分支，本地分支并不会同步删除！






参考资料
https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000

1.Git简介

	Git是目前世界上最先进的分布式版本控制系统（没有之一）
	是由linux之父Linus用C写的一个分布式版本控制系统
	
2.Git安装
	2.1.a linux下
		先试着输入git，看看系统有没有安装Git：
			$ git
			The program 'git' is currently not installed. You can install it by typing:
			sudo apt-get install git
			
			如上，有很多Linux会友好地告诉你Git没有安装，还会告诉你如何安装Git。
			
			
	2.1.b Windows上安装Git
		在Windows上使用Git，可以从Git官网直接下载安装程序，然后按默认选项安装即可。

		安装完成后，在开始菜单里找到“Git”->“Git Bash”，蹦出一个类似命令行窗口的东西，就说明Git安装成功！		
		
	
	2.2 安装完成后，还需要最后一步设置，在命令行输入：
		$ git config --global user.name "Your Name"
		$ git config --global user.email "email@example.com"
		因为Git是分布式版本控制系统，所以，每个机器都必须自报家门：你的名字和Email地址。你也许会担心，如果有人故意冒充别人怎么办？这个不必担心，首先我们相信大家都是善良无知的群众，其次，真的有冒充的也是有办法可查的。
		
		注意git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，当然也可以对某个仓库指定不同的用户名和Email地址。
		
		

3.创建版本库
    Git Bash窗口，在合适的目录下执行命令
    $ git init
    Initialized empty Git repository in /Users/michael/learngit/.git/
	瞬间Git就把仓库建好了，而且告诉你是一个空的仓库（empty Git repository）
    

    
4.添加和提交文件
    例如在learngit目录下添加了readme.txt文件
    $ git add readme.txt    #无回显
    $ git commit -m 'wrote a readme.txt file'
    回显如下：
    [master (root-commit) eaadf4e] wrote a readme file
    1 file changed, 2 insertions(+)
    create mode 100644 readme.txt
    
        -m后面输入的是本次提交的说明，可以输入任意内容，当然最好是有意义的
    
    
	$ git add file1.txt
    $ git add file2.txt file3.txt
    $ git commit -m "add 3 files."
    
    
    
5.日志和版本回退
    #查看日志
    $ git log                       输出信息较多，略显混乱
    $ git log --pretty=oneline      输出信息整齐点
    
    # 需要友情提示的是，你看到的一大串类似1094adb...的是commit id（版本号），和SVN不一样，Git的commit id不是1，2，3……递增的数字，而是一个SHA1计算出来的一个非常大的数字，用十六进制表示，而且你看到的commit id和我的肯定不一样，以你自己的为准。为什么commit id需要用这么一大串数字表示呢？因为Git是分布式的版本控制系统，后面我们还要研究多人在同一个版本库里工作，如果大家都用1，2，3……作为版本号，那肯定就冲突了。
    
    
    上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。

    现在，我们要把当前版本append GPL回退到上一个版本add distributed，就可以使用git reset命令：

    $ git reset --hard HEAD^
    HEAD is now at e475afc add distributed
    
    当你用$ git reset --hard HEAD^回退到add distributed版本时，再想恢复到append GPL，就必须找到append GPL的commit id。Git提供了一个命令git reflog用来记录你的每一次命令：

    $ git reflog
    e475afc HEAD@{1}: reset: moving to HEAD^
    1094adb (HEAD -> master) HEAD@{2}: commit: append GPL
    e475afc HEAD@{3}: commit: add distributed
    eaadf4e HEAD@{4}: commit (initial): wrote a readme file
    
    
6.工作区和缓存区
    工作区（Working Directory）：
        就是你在电脑里能看到的目录，比如上面的learngit文件夹就是一个工作区
    
    版本库（Repository）：
        工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。
    
        Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
    
    
    git status
    查看状态
        Changes not staged for commit:      这下面的文件是修改过的文件，等待--add--commit
        Untracked files:                    这下面的文件是从来没提交过的文件，等待--add--commit
        Changes to be committed:            这下面的文件是已经 add 了，但没 commit，等待commit
        
        
    git add命令实际上就是把要提交的所有修改放到暂存区（Stage），然后，执行git commit就可以一次性把暂存区的所有修改提交到分支
    
    第一次修改 -> git add -> 第二次修改 -> git commit
        第一次修改提交了，第二次修改不会提交
    
    第一次修改 -> git add -> 第二次修改 -> git add -> git commit
        两次修改都提交了
        
        
7.撤销修改
    git checkout -- file可以丢弃工作区的修改
    
    命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

    一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
    
    一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。

    总之，就是让这个文件回到最近一次git commit或git add时的状态。
    
    git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
    
    
    另一种情况是：
        修改readme.txt后，git add添加到了暂存区，还没commit，想恢复到修改前，需要如下两步
            1. git reset HEAD readme.txt 可以把暂存区的修改撤销掉（unstage），重新放回工作区
            2. git checkout -- readme.txt 丢弃工作区的修改
    
    
    再一种情况是，修改后已经提交了，就适用于版本回退了
    
    
    
    
8.删除文件
    git rm readme.txt
    
    恢复文件
        git checkout -- readme.txt
    
    
    
9.远程仓库
    Git是分布式版本控制系统，同一个Git仓库，可以分布到不同的机器上。怎么分布呢？最早，肯定只有一台机器有一个原始版本库，此后，别的机器可以“克隆”这个原始版本库，而且每台机器的版本库其实都是一样的，并没有主次之分。
    为提高代码更新效率，通常找一台电脑充当服务器的角色，每天24小时开机，其他每个人都从这个“服务器”仓库克隆一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。
    
    GitHub，神奇的网站，从名字就可以看出，这个网站就是提供Git仓库托管服务的，所以，只要注册一个GitHub账号，就可以免费获得Git远程仓库。
    
    1、注册Github
        用户名、邮箱
    
    2、创建SSH Key。
    在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key：
        2.1$ ssh-keygen -t rsa -C "youremail@example.com"
            然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码
   
        2.2登陆GitHub，打开“Account settings”，“SSH Keys”页面：
            然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：
    
10.添加远程库
    现在的情景是，你已经在本地创建了一个Git仓库后，又想在GitHub创建一个Git仓库，并且让这两个仓库进行远程同步，这样，GitHub上的仓库既可以作为备份，又可以让其他人通过该仓库来协作
    1、在github上创建Repository 
    2、在本地的learngit仓库下运行命令：
        $ git remote add origin git@github.com:michaelliao/learngit.git

    3、把本地库的所有内容推送到远程库上：
        $ git push -u origin master
            注意：由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
                    后面再只执行$ git push origin master即可
            
            
11.从远程库克隆
    假设我们从零开发，那么最好的方式是先创建远程库，然后，从远程库克隆。

        1、首先，登陆GitHub，创建一个新的仓库，名字叫gitskills：
    
        2、下一步是用命令git clone克隆一个本地库：
            $ git clone git@github.com:michaelliao/gitskills.git
    
            注意：GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。

                  使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。



12.分支
    1、创建分支
        我们创建dev分支，然后切换到dev分支：
            $ git checkout -b dev
                说明：git checkout命令加上-b参数表示创建并切换，相当于以下两条命令：
                    $ git branch dev
                    $ git checkout dev

    2、查看分支
        git branch命令查看当前分支：
        
        $ git branch
        * dev
        master
        git branch命令会列出所有分支，当前分支前面会标一个*号。

    3、合并分支
        $ git merge dev
        注意：git merge命令用于合并指定分支到当前分支。如果要合并dev到master，需先切换到master分支
        
    4、删除分支
        合并完成后，就可以放心地删除dev分支了：
        $ git branch -d dev    

    
    5、小结
        查看分支：git branch
        
        创建分支：git branch <name>
        
        切换分支：git checkout <name>
        
        创建+切换分支：git checkout -b <name>
        
        合并某分支到当前分支：git merge <name>
        
        删除分支：git branch -d <name>



13、解决冲突
    
    git merge dev
        当dev、master都对文件有修改时，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，执行命令后会提示有冲突
    
    
    git status也可以告诉我们冲突的文件详情
        Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
    
    手动解决冲突后，重新合并分支即可
    
    
14、分支管理策略

    通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
    
    如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
    
    准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward：
    
        $ git merge --no-ff -m "merge with no-ff" dev
        Merge made by the 'recursive' strategy.
        readme.txt | 1 +
        1 file changed, 1 insertion(+)
        
        因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
    
            合并后，我们用git log看看分支历史：
            
            $ git log --graph --pretty=oneline --abbrev-commit
            *   e1e9c68 (HEAD -> master) merge with no-ff
            |\  
            | * f52c633 (dev) add merge
            |/  
            *   cf810e4 conflict fixed
            ...

    
    分支策略
        在实际开发中，我们应该按照几个基本原则进行分支管理：
        
        首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
        
        那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
        
        你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。
    
        合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。
    
    
15、Bug分支
    软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。
    
    当你接到一个修复一个代号101的bug的任务时，很自然地，你想创建一个分支issue-101来修复它，但是，等等，当前正在dev上进行的工作还没有提交

    并不是你不想提交，而是工作只进行到一半，还没法提交，预计完成还需1天时间。但是，必须在两个小时内修复该bug，怎么办？

    幸好，Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作：

    $ git stash
    Saved working directory and index state WIP on dev: f52c633 add merge
    现在，用git status查看工作区，就是干净的（除非有没有被Git管理的文件），因此可以放心地创建分支来修复bug。
    
    首先确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支：
    $ git checkout master
    $ git checkout -b issue-101

    现在修复bug，然后提交：
    $ git add readme.txt 
    $ git commit -m "fix bug 101"
    
    修复完成后，切换到master分支，并完成合并，最后删除issue-101分支：
    $ git checkout master
    $ git merge --no-ff -m "merged bug fix 101" issue-101
    
    现在，是时候接着回到dev分支干活了！
    $ git checkout dev
    $ git status
    工作区是干净的，刚才的工作现场存到哪去了？用git stash list命令看看：
    
    $ git stash list
    stash@{0}: WIP on dev: f52c633 add merge
        工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
        1.一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
        2.另一种方式是用git stash pop，恢复的同时把stash内容也删了：
    
    $ git stash pop
    
    再用git stash list查看，就看不到任何stash内容了：
    
    $ git stash list
    你可以多次stash，恢复的时候，先用git stash list查看，然后恢复指定的stash，用命令：
    
    $ git stash apply stash@{0}




16、Feature分支
    软件开发中，总有无穷无尽的新的功能要不断添加进来。

    添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。

    一切顺利的话，feature分支和bug分支是类似的，拉分支，修改代码，提交代码到新拉的分支，切回原分支，合并，然后删除。

    要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除（如经费不足导致开发的新特性需要删除的时候）


17、多人协作
    但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
    1.master分支是主分支，因此要时刻与远程同步；
    2.dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
    3.bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
    4.feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
    
    总之，就是在Git中，分支完全可以在本地自己藏着玩，是否推送，视你的心情而定

    多人协作，2个人修改了同一个文件后，先后push到origin/dev，后push的会冲突
        需要先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
    $ git pull
        git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push

        因此，多人协作的工作模式通常是这样：
            1.首先，可以试图用git push origin <branch-name>推送自己的修改；
            2.如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
            3.如果合并有冲突，则解决冲突，并在本地提交；
            4.没有冲突或者解决掉冲突后，再用git push origin <branch-name>推送就能成功！
            5.如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to <branch-name> origin/<branch-name>。





18、rebase变基
    多人在一个分支上协作产生冲突时，看日志的时候比较乱，整理下分支提交合并流程
    rebase操作的特点：把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了
    
        多人在同一个分支上协作时，很容易出现冲突。即使没有冲突，后push的童鞋不得不先pull，在本地合并，然后才能push成功。
        
        每次合并再push后，分支变成了这样：
        
        $ git log --graph --pretty=oneline --abbrev-commit
        * d1be385 (HEAD -> master, origin/master) init hello
        *   e5e69f1 Merge branch 'dev'
        |\  
        | *   57c53ab (origin/dev, dev) fix env conflict
        | |\  
        | | * 7a5e5dd add env
        | * | 7bd91f1 add new env
        | |/  
        * |   12a631b merged bug fix 101
        |\ \  
        
    总之看上去很乱，rebase的操作可以将其变成一条直线
    
        $ git rebase
        First, rewinding head to replay your work on top of it...
        Applying: add comment
        Using index info to reconstruct a base tree...
        M    hello.py
        
        输出了一大堆操作，到底是啥效果？再用git log看看：
        $ git log --graph --pretty=oneline --abbrev-commit
        * 7e61ed4 (HEAD -> master) add author
        * 3611cfe add comment
        * f005ed4 (origin/master) set exit=1
        * d1be385 init hello
        ...
        原本分叉的提交现在变成一条直线了！




19、标签管理

    发布一个版本时，我们通常先在版本库中打一个标签（tag），这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
    所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。
    
    git tag <name>就可以打一个新标签：
        $ git tag v1.0
        
    git tag查看所有标签：
        $ git tag
        v1.0   
        
    git show <tagname>查看标签信息：
        $ git show v0.9
        commit f52c63349bc3c1593499807e5c8e972b82c8f286 (tag: v0.9)
        Author: Michael Liao <askxuefeng@gmail.com>
        Date:   Fri May 18 21:56:54 2018 +0800
        
            add merge
        
        diff --git a/readme.txt b/readme.txt
        ...
        

    还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
        $ git tag -a v0.1 -m "version 0.1 released" 1094adb

    注意：标签总是和某个commit挂钩。如果这个commit既出现在master分支，又出现在dev分支，那么在这两个分支上都可以看到这个标签。

    小结:
        1.命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
        2.命令git tag -a <tagname> -m "blablabla..."可以指定标签信息；
        3.命令git tag可以查看所有标签。
    

    
    操作标签
        如果标签打错了，也可以删除：
            $ git tag -d v0.1
            Deleted tag 'v0.1' (was f15b0dd)
            因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
        
        如果要推送某个标签到远程，使用命令git push origin <tagname>：
            $ git push origin v1.0
            Total 0 (delta 0), reused 0 (delta 0)
            To github.com:michaelliao/learngit.git
            * [new tag]         v1.0 -> v1.0
            
        或者，一次性推送全部尚未推送到远程的本地标签：
            $ git push origin --tags
            Total 0 (delta 0), reused 0 (delta 0)
            To github.com:michaelliao/learngit.git
            * [new tag]         v0.9 -> v0.9
        如果标签已经推送到远程，要删除远程标签就麻烦一点，
            先从本地删除：
                $ git tag -d v0.9
                Deleted tag 'v0.9' (was f52c633)
            然后，从远程删除。删除命令也是push，但是格式如下：
                $ git push origin :refs/tags/v0.9
                To github.com:michaelliao/learngit.git
                - [deleted]         v0.9
        要看看是否真的从远程库删除了标签，可以登陆GitHub查看。
        
        小结
            1.命令git push origin <tagname>可以推送一个本地标签；
            2.命令git push origin --tags可以推送全部未推送过的本地标签；
            3.命令git tag -d <tagname>可以删除一个本地标签；
            4.命令git push origin :refs/tags/<tagname>可以删除一个远程标签。


            
            
20、github、码云

    GitHub作为免费的远程仓库，通过GitHub，既可以让别人参与你的开源项目，也可以参与别人的开源项目。

    如何参与一个开源项目呢？比如人气极高的bootstrap项目，这是一个非常强大的CSS框架，你可以访问它的项目主页https://github.com/twbs/bootstrap，点“Fork”就在自己的账号下克隆了一个bootstrap仓库，然后，从自己的账号下clone：
        $ git clone git@github.com:michaelliao/bootstrap.git
        一定要从自己的账号下clone仓库，这样你才能推送修改。如果从bootstrap的作者的仓库地址git@github.com:twbs/bootstrap.git克隆，因为没有权限，你将不能推送修改。


    码云——国内的Git托管服务（https://gitee.com/）
        使用GitHub时，国内的用户经常遇到的问题是访问速度太慢，有时候还会出现无法连接的情况，码云范文速度会快一些
    
        git remote -v查看远程库信息：
            $ git remote -v
            origin    git@github.com:michaelliao/learngit.git (fetch)
            origin    git@github.com:michaelliao/learngit.git (push)

        删除已有的GitHub远程库：
            $ git remote rm origin


        可以同时关联多个远程库，但需要用不同的名称来标识不同的远程库
            先关联GitHub的远程库：
                $ git remote add github git@github.com:michaelliao/learngit.git
            再关联码云的远程库：
                $ git remote add gitee git@gitee.com:liaoxuefeng/learngit.git

        用git remote -v查看远程库信息，可以看到两个远程库：
            $ git remote -v
            gitee    git@gitee.com:liaoxuefeng/learngit.git (fetch)
            gitee    git@gitee.com:liaoxuefeng/learngit.git (push)
            github    git@github.com:michaelliao/learngit.git (fetch)
            github    git@github.com:michaelliao/learngit.git (push)
        
        如果要推送到GitHub，使用命令：
            git push github master
        如果要推送到码云，使用命令：
            git push gitee master



21、自定义GIT
    1、忽略特殊文件
        在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。
        GitHub已经为我们准备了各种配置文件，只需要组合一下就可以使用了。所有配置文件可以直接在线浏览：https://github.com/github/gitignore

        忽略文件的原则是：
            1.忽略操作系统自动生成的文件，比如缩略图等；
            2.忽略编译生成的中间文件、可执行文件等，也就是如果一个文件是通过另一个文件自动生成的，那自动生成的文件就没必要放进版本库，比如Java编译产生的.class文件，Python编译产生的.pyc、.pyo、dist等文件或目录；
            3.忽略你自己的带有敏感信息的配置文件，比如存放口令的配置文件。

        检验.gitignore的标准是git status命令是不是说working directory clean

        添加一个文件到Git，但发现添加不了，原因是这个文件被.gitignore忽略了：
            $ git add App.class
            The following paths are ignored by one of your .gitignore files:
            App.class
            Use -f if you really want to add them.
        如果你确实想添加该文件，可以用-f强制添加到Git：
            $ git add -f App.class
        或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
            $ git check-ignore -v App.class
            .gitignore:3:*.class    App.class
            Git会告诉我们，.gitignore的第3行规则忽略了该文件，于是我们就可以知道应该修订哪个规则。



    2、配置别名
        由于有些命令比较复杂，可以设置别名，简化输入
            如：用st表示status：
                $ git config --global alias.st status
                以后执行 git st就相当于执行git status
            
            --global参数是全局参数，也就是这些命令在这台电脑的所有Git仓库下都有用。如果不加，那只针对当前的仓库起作用
    
        例子
        git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
    
    
    
        每个仓库的Git配置文件都放在.git/config文件中
        别名就在[alias]后面，要删除别名，直接把对应的行删掉即可。
        而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中配置，别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置
    
    
    3、搭建git服务器
        搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
        第一步，安装git：
            $ sudo apt-get install git
        第二步，创建一个git用户，用来运行git服务：
            $ sudo adduser git
    
        第三步，收集并创建证书登录
        第四步，初始化Git仓库
        第五步，禁用shell登录：
            出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
                git:x:1001:1001:,,,:/home/git:/bin/bash
                改为：
                git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
        
        第六步，克隆远程仓库。
    
    
        管理公钥
            人较多的时候用Gitosis来管理公钥
        
        管理权限
            不支持权限控制。
            不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。
            Gitolite就是这个工具。
    
    

GIT官网
    https://git-scm.com/
    
    
    
    
    
git fetch和git pull的区别
    https://blog.csdn.net/wh_19910525/article/details/68066512
    
    1. git fetch：相当于是从远程获取最新版本到本地，不会自动merge
        操作方法如下：
            1.把服务器origin的master分支 下载到本地的tmp_branch分支里；
              git fetch origin master:tmp_branch
            2.查看当前分支何两个分支的差异点；
              git diff tmp_branch
            3.把tmp_branch 分支的commit 合并到 当前master分支；
              git merge tmp_branch
            4.如果不想保留temp分支 可以用这步删除
              git branch -d temp
        
    2. git pull：相当于是从远程获取最新版本并merge到本地
            git pull origin master
    
            上述命令其实相当于git fetch 和 git merge
            在实际使用中，git fetch更安全一些；
            因为在merge前，我们可以查看更新情况，然后再决定是否合并；
    
    
    
git有些命令识别不出远程的非master分支：
    参考：https://blog.csdn.net/guo_hongjun1611/article/details/54407293
    
    问题：
    $ git diff github/dev1201
    fatal: ambiguous argument 'github/dev1201': unknown revision or path not in the working tree.
    Use '--' to separate paths from revisions, like this:
    'git <command> [<revision>...] -- [<file>...]'

    解决办法：
    $ git remote show origin
    $ git remote update
    
    恢复正常
    $ git diff dev1201 github/dev1201 --name-only
    .gitignore
    README.md
    basic_knowledge/git_learning.txt



Git强制拉取覆盖本地 Pull force
	$ git fetch --all  
	$ git reset --hard origin/master 
	$ git pull

	https://blog.csdn.net/qinhaolei/article/details/78292840
	
	




















