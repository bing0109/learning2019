数据分析
    分类
        现状分析    日报、周报、月报分析，异常监测
        原因分析    根据现状分析结果分析原因
        预测分析    eg，根据数据分析广告最佳投放(tv/net/radio)比例、房价、股票等
        
    作用
        优化业务    广告    推荐系统
        扩展业务    风险等分析
        开拓商业机会  征信
        
        
    手段
        描述性分析   可视化、统计
        探索性分析   相关性、发现特征
        推断、统计推断     假设检验


数据科学基础库
    科学计算库   Numpy
    分析处理库   Numpy Pandas
    可视化库     Matplotlib Seaborn Echarts
    机器学习库   Scikit-learn  Statsmodels


Numpy
    ndarray 一种多维数组对象
    
    >>> import numpy as np
    一维数组
    >>> arr = np.array([1,2,3,4])
    >>> arr
    array([1, 2, 3, 4])
    >>> print(arr)
    [1 2 3 4]
    >>> arr.shape
    (4,)
    二维数组
    >>> arr2 = np.array([[1,2],[2,3],[3,4]])
    >>> print(arr2)
    [[1 2]
     [2 3]
     [3 4]]
    >>> print(arr2.shape)   查看形状
    (3, 2)
    >>> print(arr2.ndim)    查看维度
    2
    >>> print(arr2.size)    查看元素的数量
    6

    >>> arr3 = np.array([[1],[2],[3],[4]])
    >>> print(arr3)
    [[1]
     [2]
     [3]
     [4]]
    >>> print(arr3.shape)
    (4, 1)
    
    >>> arr4 = np.array([[1],[2],[3],[4,5]])
    >>> print(arr4)
    [list([1]) list([2]) list([3]) list([4, 5])]
    >>> print(arr4.shape)
    (4,)
    >>> print(arr4.size)
    4
    
    全位0的数组
    >>> arr5 = np.zeros((3,2))
    >>> arr5
    array([[0., 0.],
           [0., 0.],
           [0., 0.]])
    >>> print(arr5)
    [[0. 0.]
     [0. 0.]
     [0. 0.]]
    >>> 
    
    三维数组
    arr6 = np.zeros((3,2,3)）
    >>> arr6
    array([[[0., 0., 0.],
            [0., 0., 0.]],

           [[0., 0., 0.],
            [0., 0., 0.]],

           [[0., 0., 0.],
            [0., 0., 0.]]])
    >>> arr6[0]
    array([[0., 0., 0.],
           [0., 0., 0.]])

    全为1的数组
    >>> arr7 = np.ones((2,3))
    >>> print(arr7)
    [[1. 1. 1.]
     [1. 1. 1.]]

    
    指定形状
    >>> arr8 = np.full((3,2),100)
    >>> print(arr8)
    [[100 100]
     [100 100]
     [100 100]]
     
    占位，只占内存，打印出来的没意义
    >>> arr9 = np.empty((3,4))
    >>> print(arr9)
    [[6.92858935e-310 6.92858935e-310 6.92859356e-310 6.92859358e-310]
     [6.92859360e-310 6.92859362e-310 6.92859358e-310 6.92859362e-310]
     [6.92859360e-310 6.92859213e-310 6.92859239e-310 6.92859361e-310]]
    >>> arr10 = np.empty((2,3))
    >>> print(arr10)
    [[1. 1. 1.]
     [1. 1. 1.]]
    >>> 
    
    单位矩阵
    >>> arr11 = np.eye(4)
    >>> print(arr11)
    [[1. 0. 0. 0.]
     [0. 1. 0. 0.]
     [0. 0. 1. 0.]
     [0. 0. 0. 1.]]
    >>> 


通过随机的方法生成数组
    rand    产生均匀分布的样本值，取值区间[0, 1)
        >>> a1 = np.random.rand(2,3)
        >>> a1
        array([[0.77714776, 0.39146706, 0.15695795],
               [0.6099566 , 0.29088272, 0.56404764]])
        >>> 

    randint     从给定的范围随机取整数
        >>> a2 = np.random.randint(1,9,(2,3))
        >>> a2
        array([[4, 4, 7],
               [8, 1, 2]])
        >>> 
        1,9 表示取值范围，不包括9
        （2,3）表示维度

        
    randn   产生正太分布，平均值位0，标准差位1 的取样
        >>> a3 = np.random.randn(2,3)
        >>> a3
        array([[-1.00171851, -0.62257125, -1.08407733],
               [ 0.87151617,  1.35174555, -2.84267477]])
        >>> 

    shuff   随机打乱
        >>> a4 = np.array([[3,2],[1,4],[4,5]])
        >>> 
        >>> a4
        array([[3, 2],
               [1, 4],
               [4, 5]])
        >>> np.random.shuffle(a4)
        >>> a4
        array([[1, 4],
               [4, 5],
               [3, 2]])


数据类型
    >>> a4
    array([[1, 4],
           [4, 5],
           [3, 2]])
    >>> type(a4)            数组
    <class 'numpy.ndarray'>
    >>> a4.dtype            数据的类型
    dtype('int64')
    >>> 

    每次random取值都不一样
    >>> a5
    array([[0.35430509, 0.59195156, 0.89646792],
           [0.84031769, 0.08283977, 0.01100949]])
    >>> a6 = np.random.random((2,3))
    >>> a6
    array([[0.61343829, 0.46216972, 0.31042061],
           [0.25933831, 0.15175148, 0.81170267]])
    >>> 
 
    用seed锁住后，再获取random，每次获取的都一样
    np.random.seed(0)
    >>> a5
    array([[0.35430509, 0.59195156, 0.89646792],
           [0.84031769, 0.08283977, 0.01100949]])
    >>> 


数据类型转换
可以通过ndarray的astype方式显性转换其dtype
    >>> a = np.random.randint(1,9,(2,3))
    >>> a.dtype
    dtype('int64')
    >>> a.astype(np.float32).dtype
    dtype('float32')
    >>> b = a.astype(np.float32)
    >>> b
    array([[1., 2., 6.],
           [2., 6., 1.]], dtype=float32)
    >>> c = a.astype('U')
    >>> c
    array([['1', '2', '6'],
           ['2', '6', '1']], dtype='<U21')
    >>> d = a.astype('str')
    >>> d
    array([['1', '2', '6'],
           ['2', '6', '1']], dtype='<U21')
    >>> 


reshap()重新构建
    >>> a = np.random.randint(1,5,(2,8))
    >>> a
    array([[2, 1, 4, 1, 4, 2, 3, 4],
           [4, 1, 3, 4, 1, 2, 4, 2]])
    >>> a.reshape(4,4)
    array([[2, 1, 4, 1],
           [4, 2, 3, 4],
           [4, 1, 3, 4],
           [1, 2, 4, 2]])
    >>> a.reshape(4,3)
    Traceback (most recent call last):
      File "<stdin>", line 1, in <module>
    ValueError: cannot reshape array of size 16 into shape (4,3)
    >>> 


np.arange(1,15,2)
    1   起始值
    15  结束值，不包含
    2   步长
    >>> np.arange(1,15,2)
    array([ 1,  3,  5,  7,  9, 11, 13])
    >>> 


取值和索引
    切片索引
        >>> a = np.arange(1,13).reshape(3,4)
        >>> a
        array([[ 1,  2,  3,  4],
               [ 5,  6,  7,  8],
               [ 9, 10, 11, 12]])
        取第1，2 行
        >>> a[:2]                  
        array([[1, 2, 3, 4],
               [5, 6, 7, 8]])
        取第2,3列
        >>> a[:,1:3]
        array([[ 2,  3],
               [ 6,  7],
               [10, 11]])
        >>> 

深复制、浅复制
    浅复制，指向同一个内存空间，修改互相影响
        b = a[1:2,2:]就是一种浅复制
        >>> a
        array([[ 1,  2,  3,  4],
               [ 5,  6,  7,  8],
               [ 9, 10, 11, 12]])
        >>> b = a[1:2,2:]
        >>> b
        array([[7, 8]])
        >>> b[(0,1)]
        8
        >>> b[(0,1)] = 9
        >>> b
        array([[7, 9]])
        >>> a
        array([[ 1,  2,  3,  4],
               [ 5,  6,  7,  9],
               [ 9, 10, 11, 12]])
        >>> 

    深复制，另开辟一个内存空间并赋值，修改互不影响
        c = a.copy()是深复制
        >>> c = a[1:2,2:].copy()
        >>> c
        array([[7, 9]])
        >>> c[(0,0)] = 6
        >>> c
        array([[6, 9]])
        >>> a
        array([[ 1,  2,  3,  4],
               [ 5,  6,  7,  9],
               [ 9, 10, 11, 12]])
        >>> 

花式索引
    >>> a2 = np.random.randint(1,9,(5,4))
    >>> a2
    array([[2, 2, 8, 1],
           [8, 3, 5, 8],
           [4, 7, 4, 3],
           [8, 5, 3, 1],
           [1, 5, 6, 6]])
    >>> 
    取1行，0列和2列位置的数
    >>> a2[1,[0,2]]
    array([8, 5])
    取0行1列、2行3列位置的数
    >>> a2[[0,2],[1,3]]
    array([2, 3])
    取3行1列的数
    >>> a2[3,1]
    5
    取3行，1行的数据，注意，可以按指定顺序取值
    >>> a2[[3,1]]
    array([[8, 5, 3, 1],
           [8, 3, 5, 8]])
    嵌套取，在3行，1行，的1列，3列数据
    >>> a2[[3,1]][:,[1,3]]
    array([[5, 1],
           [3, 8]])
    >>> 
    np.ix_等效于嵌套索引
    >>> a2[np.ix_([0,2,3],[1,3])]
    array([[2, 1],
           [7, 3],
           [5, 1]])
    >>> a2[[0,2,3]][:,[1,3]]
    array([[2, 1],
           [7, 3],
           [5, 1]])
    >>> 

布尔型索引
    >>> a2
    array([[2, 2, 8, 1],
           [8, 3, 5, 8],
           [4, 7, 4, 3],
           [8, 5, 3, 1],
           [1, 5, 6, 6]])
    >>> a2>3
    array([[False, False,  True, False],
           [ True, False,  True,  True],
           [ True,  True,  True, False],
           [ True,  True, False, False],
           [False,  True,  True,  True]])
    >>> a2[a2>5]
    array([8, 8, 8, 7, 8, 6, 6])
    >>> a2[a2>3]
    array([8, 8, 5, 8, 4, 7, 4, 8, 5, 5, 6, 6])


    >>> b = np.array([[True,False],[False,True]])
    >>> c = np.array([[1,3],[4,5]])
    >>> c
    array([[1, 3],
           [4, 5]])
    >>> b
    array([[ True, False],
           [False,  True]])
    取出True的位置的数据
    >>> c[b]
    array([1, 5])


    

