数学运算
    >>> a = np.arange(1,7,1).reshape(2,3)
    >>> a
    array([[1, 2, 3],
           [4, 5, 6]])
    >>> a+a
    array([[ 2,  4,  6],
           [ 8, 10, 12]])
    >>> c
    array([[7, 1, 5],
           [2, 8, 5]])
    加法
        >>> a+c
        array([[ 8,  3,  8],
               [ 6, 13, 11]])
        >>> np.add(a,c)
        array([[ 8,  3,  8],
               [ 6, 13, 11]])
    减法
        >>> np.subtract(a,c)
        array([[-6,  1, -2],
               [ 2, -3,  1]])
    除法
        >>> np.divide(a,c)
        array([[0.14285714, 2.        , 0.6       ],
               [2.        , 0.625     , 1.2       ]])
    乘法
        >>> np.multiply(a,c)
        array([[ 7,  2, 15],
               [ 8, 40, 30]])

    每个元素都加1，
        先把1广播成与a的大小一样，再与a相加
        >>> a+1
        array([[2, 3, 4],
               [5, 6, 7]])


        >>> a*2
        array([[ 2,  4,  6],
               [ 8, 10, 12]])
        >>> a/2
        array([[0.5, 1. , 1.5],
               [2. , 2.5, 3. ]])
        >>> a-1
        array([[0, 1, 2],
               [3, 4, 5]])
        平方
        >>> a**2
        array([[ 1,  4,  9],
               [16, 25, 36]])
        开方
        >>> a**0.5
        array([[1.        , 1.41421356, 1.73205081],
               [2.        , 2.23606798, 2.44948974]])
        取倒数
        >>> 1/a
        array([[1.        , 0.5       , 0.33333333],
               [0.25      , 0.2       , 0.16666667]])


    通用函数
        取绝对值
        abs
        fabs 对复数
        >>> b = np.random.randn(2,3)
        >>> b
        array([[-1.078278  ,  1.39547227,  1.78748405],
               [-0.56951726,  0.17538653, -0.46250554]])
        >>> np.abs(b)
        array([[1.078278  , 1.39547227, 1.78748405],
               [0.56951726, 0.17538653, 0.46250554]])
        >>> np.fabs(b)
        array([[1.078278  , 1.39547227, 1.78748405],
               [0.56951726, 0.17538653, 0.46250554]])

        开根号
        >>> np.sqrt(b)

        __main__:1: RuntimeWarning: invalid value encountered in sqrt
        array([[       nan, 1.18130109, 1.33696823],
               [       nan, 0.41879175,        nan]])
        >>> 
        >>> np.sqrt(abs(b))
        array([[1.03840166, 1.18130109, 1.33696823],
               [0.75466368, 0.41879175, 0.6800776 ]])
        >>> 
        
        平方
        >>> np.square(b)
        array([[1.16268345, 1.94734286, 3.19509921],
               [0.32434991, 0.03076044, 0.21391137]])

        指数
        >>> np.exp(b)
array([[0.34018081, 4.03688062, 5.97440222],
       [0.5657985 , 1.19170676, 0.62970392]])

自然对数
>>> b
array([[-1.078278  ,  1.39547227,  1.78748405],
       [-0.56951726,  0.17538653, -0.46250554]])
>>> np.log(b)
__main__:1: RuntimeWarning: invalid value encountered in log
array([[        nan,  0.3332329 ,  0.58080907],
       [        nan, -1.74076298,         nan]])
>>> np.log(np.abs(b))
array([[ 0.07536533,  0.3332329 ,  0.58080907],
       [-0.56296618, -1.74076298, -0.77109674]])
以2位底的对数
>>> np.log2(np.abs(b))
array([[ 0.10872918,  0.48075346,  0.83793036],
       [-0.81218852, -2.51139012, -1.11245745]])
以10为底的对数
>>> np.log10(np.abs(b))
array([[ 0.03273075,  0.14472121,  0.25224217],
       [-0.24449311, -0.75600376, -0.33488306]])
>>> 

符号函数，计算各个元素的正负号
>>> np.sign(b)
array([[-1.,  1.,  1.],
       [-1.,  1., -1.]])

ceil 向上取整
floor向下取整
rint四舍五入取整，碰到负数时，不管符号，只对数字部分做判断
>>> np.ceil(b)
array([[-1.,  2.,  2.],
       [-0.,  1., -0.]])
>>> np.floor(b)
array([[-2.,  1.,  1.],
       [-1.,  0., -1.]])
>>> np.rint(b)
array([[-1.,  1.,  2.],
       [-1.,  0., -0.]])

modf 把整数和小数部分分成两个数字返回
>>> np.modf(b)
(array([[-0.078278  ,  0.39547227,  0.78748405],
       [-0.56951726,  0.17538653, -0.46250554]]), array([[-1.,  1.,  1.],
       [-0.,  0., -0.]]))
>>> 

-float('inf')   负无穷
float('inf')   正无穷
>>> b
array([[-1.078278  ,  1.39547227,  1.78748405],
       [-0.56951726,  0.17538653, -0.46250554]])
>>> b[0,0] = float('inf')
>>> b
array([[        inf,  1.39547227,  1.78748405],
       [-0.56951726,  0.17538653, -0.46250554]])
>>> b[0,1] = -float('inf')
>>> b
array([[        inf,        -inf,  1.78748405],
       [-0.56951726,  0.17538653, -0.46250554]])
>>> 

astype('bool') 布尔值，0是False，非0是True

~取反，要先转换成bool再取反



二元函数
    加减乘除add subtract multiply divide/floor_divide

A的b次方    
>>> c = np.arange(1,17).reshape(4,4)
>>> c
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12],
       [13, 14, 15, 16]])
>>> 
>>> np.power(c,2)
array([[  1,   4,   9,  16],
       [ 25,  36,  49,  64],
       [ 81, 100, 121, 144],
       [169, 196, 225, 256]])
>>> np.power(c,0.5)
array([[1.        , 1.41421356, 1.73205081, 2.        ],
       [2.23606798, 2.44948974, 2.64575131, 2.82842712],
       [3.        , 3.16227766, 3.31662479, 3.46410162],
       [3.60555128, 3.74165739, 3.87298335, 4.        ]])
>>> 

maximum 元素级的最大值计算，谁大保留谁，由nan保留nan
fmax    忽略缺失值（nan）
>>> d = np.random.randint(1,17,(4,4))
>>> e = np.random.randint(1,17,(4,4))
>>> d
array([[ 8, 12, 15,  3],
       [12,  1, 15,  4],
       [ 6, 13, 10, 11],
       [ 5, 12,  5,  7]])
>>> e
array([[ 5, 16, 16,  5],
       [ 4, 13,  5,  5],
       [ 9, 15, 16,  5],
       [ 4, 11,  8, 16]])
两个数组比较
>>> np.maximum(d,e)
array([[ 8, 16, 16,  5],
       [12, 13, 15,  5],
       [ 9, 15, 16, 11],
       [ 5, 12,  8, 16]])
数组和值比较
>>> np.maximum(d,6)
array([[ 8, 12, 15,  6],
       [12,  6, 15,  6],
       [ 6, 13, 10, 11],
       [ 6, 12,  6,  7]])
>>> 


mod 元素级的求模计算

copysign 把第二个数组中元素的符合赋给第一个数组中的元素
    

logical_and 逻辑或
logical_or  或
logical_xor 异或

diag 取对角线上的元素
>>> b
array([[ 1,  2,  3,  4],
       [ 5,  6,  7,  8],
       [ 9, 10, 11, 12]])
>>> np.diag(b)
array([ 1,  6, 11])
trace对角线上元素之和
>>> np.trace(b)
18

linalg.det  行列式 必须是方阵
>>> e = np.random.randint(1,9,(3,3))
>>> e
array([[1, 8, 6],
       [7, 1, 2],
       [3, 5, 3]])
>>> np.linalg.det(e)
65.00000000000004






