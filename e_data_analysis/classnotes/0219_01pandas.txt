pandas

    一般通过读取文件获取数据表
    通过dict、list或ndarray等构造DataFrame


从文件读取数据构造数据表DataFrame
    pd.read_csv('/home/abc.csv',encoding='latin1',delimiter=',')
    pd.read_csv('/home/abc.csv',encoding='latin1',sep=',')
        当utf8解决不了编码的时候，又不是中文，就考虑latin1的编码
        sep与delimiter是分隔符，效果一样
    pd.read_csv('/home/abc.csv',encoding='latin1',sep=',',header=1)
        header:指定某一行作为列索引，默认第0行
        index_col：指定某一列作为行索引，默认第0列

    data = pd.read_csv('/home/abc.csv',encoding='latin1',sep=',',parse_dates=['Date'])
        parse_dates=['Date']：把'Date'列转换成时间格式
            data['Date'].dtype可查看该列的数据类型
            
        data.index      获取行索引的名字
        data.columns    获取列索引的名字
        data.values     获取数据内容，不包括索引
        data.head()     默认获取前5行
        data.tail()     默认获取后5行
        data.head(10)   获取前10行
    


通过字典构造数据表
    data = {'id':[1001,1002,1003,1004,1005,1006], 
            'date':pd.date_range('20130102', periods=6),
            'city':['Beijing ', 'SH', ' guangzhou ', 'Shenzhen', 'shanghai', 'BEIJING '],
            'age':[23,44,54,32,34,32],
            'category':['100-A','100-B','110-A','110-C','210-A','130-F'],
            'price':[1200,np.nan,2133,5433,np.nan,4432]}

    a = pd.DataFrame(data)
    print(type(a))

    字典key自动变成列索引
    行索引自动生成012345，
    也可以指定a = pd.DataFrame(data，index=list('ABCDEF'),columns=['id', 'date', 'city', 'age', 'category', 'newcol'])，index行索引需与字典的数据量对应，columns可以删除或新增某一列。
    

通过数组构造数据表
    arr = np.random.randn(5,6)
    pd.DateFrame(arr,index=list('abcde'),columns=list('ABCDEF'))


构造数据结构Series
    Series是一种一维的数据表
    通过列表构造Series
        pd.Series([-1,2,3,4])
        obj=pd.Series([-1,2,3,4],index=list('abcd'))
    
    通过字典构造Series
        dict = {'a':1,'b':2,'c':3,'d':4,}
        obj=pd.Series(dict)
            dict的key会自动变成Series的索引
        
    obj.index   获取行索引的名字
    obj.values  获取数据内容，不包括索引
    


数据表的相关属性
    data.shape  形状
    data.dtype  数据的类型，每一列都分别返回
    data['date'].dtype  查看‘date’列的数据类型
    data.size   数据表的元素个数
    data.info() 查看表的基本信息
    data.values
    data.index
    data.columns
    data['id'].astype(np.str) 把‘id’列转换成str类型
    
    type(data['price'])     把'price'列取出来，查看取出后的类型，结果是Series类型
        data.price  也可以用这种方法抠出来某一列
    
loc和iloc
    iloc只能针对索引号
        data.iloc[0]    取第0行，返回一个Series对象
        data.iloc[0:2,2:]   切片索引
        data.iloc[[3,1],[4,1,3]]    花式索引
    loc针对索引名
        data.loc['a':'c']   包含'c'，（iloc不包含）
        其他的方法与iloc一样

布尔型索引
    data[data['age']<40]        取出'age'小于40的数据
    data.loc[data['age']<40,:]    效果同上
    
    is_age = data['age']<40
    is_bool = data['price'].isna()  是否缺失
    
    is_age | is_bool    或条件
    is_age & is_bool    与条件


    上面的方法都可以嵌套


层次化索引
    >>> data = pd.Series([-1,2,3,4],index=[[0,1,1,0],['a','b','a','a']])
    >>> 
    >>> data
    0  a   -1
    1  b    2
       a    3
    0  a    4
    dtype: int64
    >>> data.index
    MultiIndex(levels=[[0, 1], ['a', 'b']],
               labels=[[0, 1, 1, 0], [0, 1, 0, 0]])

    MultiIndex，有多层索引
        data['b']
        data.unstack()
        data.stack()
        上面三个都报错了，老师的不报错，待排查原因
        https://www.cnblogs.com/bambipai/p/7658311.html


查看是否有空值
    isna()
    notna()

        >>> data.isna()
        0  a    False
        1  b    False
           a    False
        0  a    False
        dtype: bool
        >>> 
        >>> data.notna()
        0  a    True
        1  b    True
           a    True
        0  a    True
        dtype: bool
        >>> ~data.notna()
        0  a    False
        1  b    False
           a    False
        0  a    False
        dtype: bool


查看某一列的唯一值，unique()，只能针对Series对象
    data['city'].unique()
    data['city'].str.title().str.strip().unique()   统一格式后再查找唯一值


查看是否在数据表中，用 isin()
    data.isin(['wuhan','深圳'])   针对data的每个元素做判断，返回true或false
    
    from datetime import datetime
    >>> from datetime import datetime
    >>> datetime(2019,2,19,11,23,34).weekday()
    1
    >>> datetime(2019,2,19,11,23,34).day
    19
    >>> datetime(2019,2,19,11,23,34).hour
    
    data['date'].loc[0].minute  数据表data中的‘date'列的第0行里面的分钟数
    d.isin([])



统计相同元素的个数，value_counts()


































